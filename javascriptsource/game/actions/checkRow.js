// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import { Big } from "big.js";

// BEGIN EXTRA CODE

	const showMessage = (message) => {
		const messageElement = document.createElement('p')
		messageElement.textContent = message
		const messageDisplay = document.querySelector('.message-container')
		messageDisplay.append(messageElement)
		setTimeout(()=> messageDisplay.removeChild(messageElement),2000 )
	}

	const flipTile = () => {
		const rowTiles = document.querySelector('.mx-name-guessRow_' + currentRow).childNodes
		let checkWord = word
		const guess = []

		// coloca tudo como cinza
		rowTiles.forEach( tile => {
			guess.push({ letter : tile.getAttribute('data'), color : 'grey-overlay'})
		})

		// preenche de verde se a letra bater no lugar certo
		guess.forEach((guess, index) => {
			 if(guess.letter == word[index]) {
				 guess.color = 'green-overlay'
				 checkWord = checkWord.replace(guess.letter, '')
			 }
		})

		// preenche de amarelo se a letra estÃ¡ correta mas no lugar errado
		guess.forEach( guess => {
			 if(checkWord.includes(guess.letter)) {
				 guess.color = 'yellow-overlay'
				 checkWord = checkWord.replace(guess.letter, '')
			 }
		})	

		// preenche a linha atual com as cores juntamente com as teclas
		rowTiles.forEach((tile, index) => {
			setTimeout(()=> {
				tile.classList.add('flip')
				tile.classList.add(guess[index].color)
				addColorToKey(guess[index].letter, guess[index].color)
			}, 500 * index)
		})
	}

	const addColorToKey = (keyLetter, style) => {
		const key = document.querySelector('[key='+ keyLetter + ']')
		key.classList.add(style)
	}
	
// END EXTRA CODE

/**
 * @param {string} urlCheck - URI endpoint check word
 * @returns {Promise.<void>}
 */
export async function checkRow(urlCheck) {
	// BEGIN USER CODE

	const guess = guesses[currentRow].join('')
	
	fetch(urlCheck + guess)
  	.then(response => response.json())
  	.then(check => {
		if(!check[0]){
			showMessage('Word invalid !!')
			return
		} else {
			if(currentTile > 4) {
				flipTile()
				if ( word == guess ) {
					showMessage('Topzeraaaaaa')
					isGameOver = true
				} else {
					
					if(currentRow >= 5) {
						isGameOver = false
						showMessage('Game Over My Friend!!')
						return
					}
					if(currentRow < 5 ){
						currentRow++
						currentTile = 0
					}
				}
			} 
		}
	  }
	).catch(err => console.log(err))

	// END USER CODE
}
